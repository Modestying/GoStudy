// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: hkvision/hkvision.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HKVisionService_GetDeviceConfig_FullMethodName = "/hkvision.v1.HKVisionService/GetDeviceConfig"
	HKVisionService_SetDeviceConfig_FullMethodName = "/hkvision.v1.HKVisionService/SetDeviceConfig"
	HKVisionService_GetEventAbility_FullMethodName = "/hkvision.v1.HKVisionService/GetEventAbility"
)

// HKVisionServiceClient is the client API for HKVisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HKVisionServiceClient interface {
	// 查询报警规则 预置点可以不填
	GetDeviceConfig(ctx context.Context, in *GetDeviceConfigRequest, opts ...grpc.CallOption) (*GetDeviceConfigResponse, error)
	// 设置报警规则 预置点可以不填    添加、删除、修改 通过此接口设置
	SetDeviceConfig(ctx context.Context, in *SetDeviceConfigRequest, opts ...grpc.CallOption) (*SetDeviceConfigResponse, error)
	// 获取海康设备报警能力集
	GetEventAbility(ctx context.Context, in *GetEventAbilityRequest, opts ...grpc.CallOption) (*GetEventAbilityResponse, error)
}

type hKVisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHKVisionServiceClient(cc grpc.ClientConnInterface) HKVisionServiceClient {
	return &hKVisionServiceClient{cc}
}

func (c *hKVisionServiceClient) GetDeviceConfig(ctx context.Context, in *GetDeviceConfigRequest, opts ...grpc.CallOption) (*GetDeviceConfigResponse, error) {
	out := new(GetDeviceConfigResponse)
	err := c.cc.Invoke(ctx, HKVisionService_GetDeviceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hKVisionServiceClient) SetDeviceConfig(ctx context.Context, in *SetDeviceConfigRequest, opts ...grpc.CallOption) (*SetDeviceConfigResponse, error) {
	out := new(SetDeviceConfigResponse)
	err := c.cc.Invoke(ctx, HKVisionService_SetDeviceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hKVisionServiceClient) GetEventAbility(ctx context.Context, in *GetEventAbilityRequest, opts ...grpc.CallOption) (*GetEventAbilityResponse, error) {
	out := new(GetEventAbilityResponse)
	err := c.cc.Invoke(ctx, HKVisionService_GetEventAbility_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HKVisionServiceServer is the server API for HKVisionService service.
// All implementations must embed UnimplementedHKVisionServiceServer
// for forward compatibility
type HKVisionServiceServer interface {
	// 查询报警规则 预置点可以不填
	GetDeviceConfig(context.Context, *GetDeviceConfigRequest) (*GetDeviceConfigResponse, error)
	// 设置报警规则 预置点可以不填    添加、删除、修改 通过此接口设置
	SetDeviceConfig(context.Context, *SetDeviceConfigRequest) (*SetDeviceConfigResponse, error)
	// 获取海康设备报警能力集
	GetEventAbility(context.Context, *GetEventAbilityRequest) (*GetEventAbilityResponse, error)
	mustEmbedUnimplementedHKVisionServiceServer()
}

// UnimplementedHKVisionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHKVisionServiceServer struct {
}

func (UnimplementedHKVisionServiceServer) GetDeviceConfig(context.Context, *GetDeviceConfigRequest) (*GetDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfig not implemented")
}
func (UnimplementedHKVisionServiceServer) SetDeviceConfig(context.Context, *SetDeviceConfigRequest) (*SetDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceConfig not implemented")
}
func (UnimplementedHKVisionServiceServer) GetEventAbility(context.Context, *GetEventAbilityRequest) (*GetEventAbilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventAbility not implemented")
}
func (UnimplementedHKVisionServiceServer) mustEmbedUnimplementedHKVisionServiceServer() {}

// UnsafeHKVisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HKVisionServiceServer will
// result in compilation errors.
type UnsafeHKVisionServiceServer interface {
	mustEmbedUnimplementedHKVisionServiceServer()
}

func RegisterHKVisionServiceServer(s grpc.ServiceRegistrar, srv HKVisionServiceServer) {
	s.RegisterService(&HKVisionService_ServiceDesc, srv)
}

func _HKVisionService_GetDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HKVisionServiceServer).GetDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HKVisionService_GetDeviceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HKVisionServiceServer).GetDeviceConfig(ctx, req.(*GetDeviceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HKVisionService_SetDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HKVisionServiceServer).SetDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HKVisionService_SetDeviceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HKVisionServiceServer).SetDeviceConfig(ctx, req.(*SetDeviceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HKVisionService_GetEventAbility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventAbilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HKVisionServiceServer).GetEventAbility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HKVisionService_GetEventAbility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HKVisionServiceServer).GetEventAbility(ctx, req.(*GetEventAbilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HKVisionService_ServiceDesc is the grpc.ServiceDesc for HKVisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HKVisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hkvision.v1.HKVisionService",
	HandlerType: (*HKVisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceConfig",
			Handler:    _HKVisionService_GetDeviceConfig_Handler,
		},
		{
			MethodName: "SetDeviceConfig",
			Handler:    _HKVisionService_SetDeviceConfig_Handler,
		},
		{
			MethodName: "GetEventAbility",
			Handler:    _HKVisionService_GetEventAbility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hkvision/hkvision.proto",
}
