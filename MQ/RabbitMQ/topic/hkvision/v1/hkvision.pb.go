// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: hkvision/hkvision.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 报警类型
type AlarmType int32

const (
	AlarmType_MOTION_DETECTION         AlarmType = 0  // 移动侦测
	AlarmType_SHELTER                  AlarmType = 1  // 遮挡
	AlarmType_TRAVERSE_PLANE           AlarmType = 2  // 划线报警
	AlarmType_FIELD_DETECTION          AlarmType = 3  // 区域入侵侦测
	AlarmType_LOITER                   AlarmType = 4  // 徘徊
	AlarmType_ENTER_FIELD              AlarmType = 5  // 进入区域
	AlarmType_EXIT_FIELD               AlarmType = 6  // 离开区域
	AlarmType_HIGH_DENSITY             AlarmType = 7  // 人员聚集
	AlarmType_BAGGAGE_LEFT             AlarmType = 8  // 物品遗留
	AlarmType_BAGGAGE_TAKE             AlarmType = 9  // 物品拿取
	AlarmType_PARKING_DETECTION        AlarmType = 10 // 停车侦测
	AlarmType_VEHICLE_DETECT           AlarmType = 11 // 车辆检测
	AlarmType_FACE_SNAP                AlarmType = 12 // 人脸检测
	AlarmType_MIXED_TARGET_DETECTION   AlarmType = 13 // 混合目标检测
	AlarmType_ALL_TYPE                 AlarmType = 14 // 全部类型
	AlarmType_SMART_MOTION_DETECT      AlarmType = 15 // SMART_开头的都是智能服务;见smart_server.proto
	AlarmType_SMART_FIELD_DETECTION    AlarmType = 16 // 智能分析服务-区域入侵
	AlarmType_SMART_LINE_ALARM         AlarmType = 17 // 智能分析服务-越界报警
	AlarmType_SMART_ENTER_FIELD        AlarmType = 18 // 智能分析服务-进入区域
	AlarmType_SMART_EXIT_FIELD         AlarmType = 19 // 智能分析服务-离开区域
	AlarmType_SMART_TARGET_DETECT_MIX  AlarmType = 20 // 智能分析服务-混合目标检测，人/车/动物
	AlarmType_SMART_TARGET_DETECT_BOAT AlarmType = 21 // 智能分析服务-混合目标检测，船
	AlarmType_SIGNAL_LOSS              AlarmType = 22 // 信号丢失
)

// Enum value maps for AlarmType.
var (
	AlarmType_name = map[int32]string{
		0:  "MOTION_DETECTION",
		1:  "SHELTER",
		2:  "TRAVERSE_PLANE",
		3:  "FIELD_DETECTION",
		4:  "LOITER",
		5:  "ENTER_FIELD",
		6:  "EXIT_FIELD",
		7:  "HIGH_DENSITY",
		8:  "BAGGAGE_LEFT",
		9:  "BAGGAGE_TAKE",
		10: "PARKING_DETECTION",
		11: "VEHICLE_DETECT",
		12: "FACE_SNAP",
		13: "MIXED_TARGET_DETECTION",
		14: "ALL_TYPE",
		15: "SMART_MOTION_DETECT",
		16: "SMART_FIELD_DETECTION",
		17: "SMART_LINE_ALARM",
		18: "SMART_ENTER_FIELD",
		19: "SMART_EXIT_FIELD",
		20: "SMART_TARGET_DETECT_MIX",
		21: "SMART_TARGET_DETECT_BOAT",
		22: "SIGNAL_LOSS",
	}
	AlarmType_value = map[string]int32{
		"MOTION_DETECTION":         0,
		"SHELTER":                  1,
		"TRAVERSE_PLANE":           2,
		"FIELD_DETECTION":          3,
		"LOITER":                   4,
		"ENTER_FIELD":              5,
		"EXIT_FIELD":               6,
		"HIGH_DENSITY":             7,
		"BAGGAGE_LEFT":             8,
		"BAGGAGE_TAKE":             9,
		"PARKING_DETECTION":        10,
		"VEHICLE_DETECT":           11,
		"FACE_SNAP":                12,
		"MIXED_TARGET_DETECTION":   13,
		"ALL_TYPE":                 14,
		"SMART_MOTION_DETECT":      15,
		"SMART_FIELD_DETECTION":    16,
		"SMART_LINE_ALARM":         17,
		"SMART_ENTER_FIELD":        18,
		"SMART_EXIT_FIELD":         19,
		"SMART_TARGET_DETECT_MIX":  20,
		"SMART_TARGET_DETECT_BOAT": 21,
		"SIGNAL_LOSS":              22,
	}
)

func (x AlarmType) Enum() *AlarmType {
	p := new(AlarmType)
	*p = x
	return p
}

func (x AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[0].Descriptor()
}

func (AlarmType) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[0]
}

func (x AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmType.Descriptor instead.
func (AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{0}
}

// 划线方向
type DirectionType int32

const (
	DirectionType_ABBA DirectionType = 0 // ab双向
	DirectionType_A_B  DirectionType = 1 // a到b
	DirectionType_B_A  DirectionType = 2 // b到a
)

// Enum value maps for DirectionType.
var (
	DirectionType_name = map[int32]string{
		0: "ABBA",
		1: "A_B",
		2: "B_A",
	}
	DirectionType_value = map[string]int32{
		"ABBA": 0,
		"A_B":  1,
		"B_A":  2,
	}
)

func (x DirectionType) Enum() *DirectionType {
	p := new(DirectionType)
	*p = x
	return p
}

func (x DirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[1].Descriptor()
}

func (DirectionType) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[1]
}

func (x DirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionType.Descriptor instead.
func (DirectionType) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{1}
}

// 目标类型
type TargetType int32

const (
	TargetType_All_Target TargetType = 0 //所有目标
	TargetType_People     TargetType = 1 //人
	TargetType_Vehicle    TargetType = 2 //车辆
	TargetType_BOAT       TargetType = 3 //船
)

// Enum value maps for TargetType.
var (
	TargetType_name = map[int32]string{
		0: "All_Target",
		1: "People",
		2: "Vehicle",
		3: "BOAT",
	}
	TargetType_value = map[string]int32{
		"All_Target": 0,
		"People":     1,
		"Vehicle":    2,
		"BOAT":       3,
	}
)

func (x TargetType) Enum() *TargetType {
	p := new(TargetType)
	*p = x
	return p
}

func (x TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[2].Descriptor()
}

func (TargetType) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[2]
}

func (x TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetType.Descriptor instead.
func (TargetType) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{2}
}

// 穿越方向
type CrossDirection int32

const (
	CrossDirection_BOTH_DIRECTION CrossDirection = 0 // 双向
	CrossDirection_LEFT_TO_RIGHT  CrossDirection = 1 // 由左至右
	CrossDirection_RIGHT_TO_LEFT  CrossDirection = 2 // 由右至左
)

// Enum value maps for CrossDirection.
var (
	CrossDirection_name = map[int32]string{
		0: "BOTH_DIRECTION",
		1: "LEFT_TO_RIGHT",
		2: "RIGHT_TO_LEFT",
	}
	CrossDirection_value = map[string]int32{
		"BOTH_DIRECTION": 0,
		"LEFT_TO_RIGHT":  1,
		"RIGHT_TO_LEFT":  2,
	}
)

func (x CrossDirection) Enum() *CrossDirection {
	p := new(CrossDirection)
	*p = x
	return p
}

func (x CrossDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrossDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[3].Descriptor()
}

func (CrossDirection) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[3]
}

func (x CrossDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrossDirection.Descriptor instead.
func (CrossDirection) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{3}
}

// 检测目标
type DETECTION_TARGET int32

const (
	DETECTION_TARGET_TARGET_PEOPLE DETECTION_TARGET = 0 // 人
	DETECTION_TARGET_TARGET_CAR    DETECTION_TARGET = 1 // 车
	DETECTION_TARGET_TARGET_MIXED  DETECTION_TARGET = 2 // 混合
)

// Enum value maps for DETECTION_TARGET.
var (
	DETECTION_TARGET_name = map[int32]string{
		0: "TARGET_PEOPLE",
		1: "TARGET_CAR",
		2: "TARGET_MIXED",
	}
	DETECTION_TARGET_value = map[string]int32{
		"TARGET_PEOPLE": 0,
		"TARGET_CAR":    1,
		"TARGET_MIXED":  2,
	}
)

func (x DETECTION_TARGET) Enum() *DETECTION_TARGET {
	p := new(DETECTION_TARGET)
	*p = x
	return p
}

func (x DETECTION_TARGET) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_TARGET) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[4].Descriptor()
}

func (DETECTION_TARGET) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[4]
}

func (x DETECTION_TARGET) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_TARGET.Descriptor instead.
func (DETECTION_TARGET) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{4}
}

// 车辆类型
type VehicleType int32

const (
	VehicleType_CAR              VehicleType = 0 //轿车
	VehicleType_TRUCK            VehicleType = 1 //卡车
	VehicleType_BUS              VehicleType = 2 //客车
	VehicleType_NO_MOTOR_VEHICLE VehicleType = 3 //非机动车
)

// Enum value maps for VehicleType.
var (
	VehicleType_name = map[int32]string{
		0: "CAR",
		1: "TRUCK",
		2: "BUS",
		3: "NO_MOTOR_VEHICLE",
	}
	VehicleType_value = map[string]int32{
		"CAR":              0,
		"TRUCK":            1,
		"BUS":              2,
		"NO_MOTOR_VEHICLE": 3,
	}
)

func (x VehicleType) Enum() *VehicleType {
	p := new(VehicleType)
	*p = x
	return p
}

func (x VehicleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleType) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[5].Descriptor()
}

func (VehicleType) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[5]
}

func (x VehicleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleType.Descriptor instead.
func (VehicleType) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{5}
}

// 颜色
type Color int32

const (
	Color_BLUE   Color = 0 //蓝色
	Color_YELLOW Color = 1 //黄色
	Color_WHITE  Color = 2 //白色
	Color_BLACK  Color = 3 //黑色
	Color_GREEN  Color = 4 //绿色
	Color_RED    Color = 5 //红色
	Color_ORANGE Color = 6 //橙色
	Color_OTHER  Color = 7 //其他
)

// Enum value maps for Color.
var (
	Color_name = map[int32]string{
		0: "BLUE",
		1: "YELLOW",
		2: "WHITE",
		3: "BLACK",
		4: "GREEN",
		5: "RED",
		6: "ORANGE",
		7: "OTHER",
	}
	Color_value = map[string]int32{
		"BLUE":   0,
		"YELLOW": 1,
		"WHITE":  2,
		"BLACK":  3,
		"GREEN":  4,
		"RED":    5,
		"ORANGE": 6,
		"OTHER":  7,
	}
)

func (x Color) Enum() *Color {
	p := new(Color)
	*p = x
	return p
}

func (x Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Color) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[6].Descriptor()
}

func (Color) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[6]
}

func (x Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Color.Descriptor instead.
func (Color) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{6}
}

// 目标年龄
type HumanAge int32

const (
	HumanAge_INFANT     HumanAge = 0 //婴幼儿
	HumanAge_CHILD      HumanAge = 1 //儿童
	HumanAge_YOUNGSTER  HumanAge = 2 //少年
	HumanAge_ADOLESCENT HumanAge = 3 //青少年
	HumanAge_YOUTH      HumanAge = 4 //青年
	HumanAge_PRIME      HumanAge = 5 //壮年
	HumanAge_MIDLIFE    HumanAge = 6 //中年
	HumanAge_MIDAGE     HumanAge = 7 //中老年
	HumanAge_OLD        HumanAge = 8 //老年
)

// Enum value maps for HumanAge.
var (
	HumanAge_name = map[int32]string{
		0: "INFANT",
		1: "CHILD",
		2: "YOUNGSTER",
		3: "ADOLESCENT",
		4: "YOUTH",
		5: "PRIME",
		6: "MIDLIFE",
		7: "MIDAGE",
		8: "OLD",
	}
	HumanAge_value = map[string]int32{
		"INFANT":     0,
		"CHILD":      1,
		"YOUNGSTER":  2,
		"ADOLESCENT": 3,
		"YOUTH":      4,
		"PRIME":      5,
		"MIDLIFE":    6,
		"MIDAGE":     7,
		"OLD":        8,
	}
)

func (x HumanAge) Enum() *HumanAge {
	p := new(HumanAge)
	*p = x
	return p
}

func (x HumanAge) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HumanAge) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[7].Descriptor()
}

func (HumanAge) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[7]
}

func (x HumanAge) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HumanAge.Descriptor instead.
func (HumanAge) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{7}
}

// 表情
type FaceExpression int32

const (
	FaceExpression_SURPRISED  FaceExpression = 0 //惊讶
	FaceExpression_PANIC      FaceExpression = 1 //害怕
	FaceExpression_DISGUUSTED FaceExpression = 2 //厌恶
	FaceExpression_HAPPY      FaceExpression = 3 //高兴
	FaceExpression_SAD        FaceExpression = 4 //难过
	FaceExpression_ANGRY      FaceExpression = 5 //愤怒
	FaceExpression_POKER      FaceExpression = 6 //中性
)

// Enum value maps for FaceExpression.
var (
	FaceExpression_name = map[int32]string{
		0: "SURPRISED",
		1: "PANIC",
		2: "DISGUUSTED",
		3: "HAPPY",
		4: "SAD",
		5: "ANGRY",
		6: "POKER",
	}
	FaceExpression_value = map[string]int32{
		"SURPRISED":  0,
		"PANIC":      1,
		"DISGUUSTED": 2,
		"HAPPY":      3,
		"SAD":        4,
		"ANGRY":      5,
		"POKER":      6,
	}
)

func (x FaceExpression) Enum() *FaceExpression {
	p := new(FaceExpression)
	*p = x
	return p
}

func (x FaceExpression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaceExpression) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[8].Descriptor()
}

func (FaceExpression) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[8]
}

func (x FaceExpression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaceExpression.Descriptor instead.
func (FaceExpression) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{8}
}

type FaceComparedType int32

const (
	FaceComparedType_NAME FaceComparedType = 0 //人脸图片名称
	FaceComparedType_DATA FaceComparedType = 1 //人脸图片
)

// Enum value maps for FaceComparedType.
var (
	FaceComparedType_name = map[int32]string{
		0: "NAME",
		1: "DATA",
	}
	FaceComparedType_value = map[string]int32{
		"NAME": 0,
		"DATA": 1,
	}
)

func (x FaceComparedType) Enum() *FaceComparedType {
	p := new(FaceComparedType)
	*p = x
	return p
}

func (x FaceComparedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaceComparedType) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[9].Descriptor()
}

func (FaceComparedType) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[9]
}

func (x FaceComparedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaceComparedType.Descriptor instead.
func (FaceComparedType) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{9}
}

// 上身衣服类型
type UpType int32

const (
	UpType_SHORTSLEEVE UpType = 0 //短袖
	UpType_LONGSLEEVE  UpType = 1 //长袖
	UpType_UNKNOWN     UpType = 2 //未知
)

// Enum value maps for UpType.
var (
	UpType_name = map[int32]string{
		0: "SHORTSLEEVE",
		1: "LONGSLEEVE",
		2: "UNKNOWN",
	}
	UpType_value = map[string]int32{
		"SHORTSLEEVE": 0,
		"LONGSLEEVE":  1,
		"UNKNOWN":     2,
	}
)

func (x UpType) Enum() *UpType {
	p := new(UpType)
	*p = x
	return p
}

func (x UpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpType) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[10].Descriptor()
}

func (UpType) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[10]
}

func (x UpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpType.Descriptor instead.
func (UpType) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{10}
}

// 下身衣服类型
type DownType int32

const (
	DownType_SHORTTROUSERS DownType = 0 //短裤
	DownType_LONGTROUSERS  DownType = 1 //长裤
	DownType_SKIRT         DownType = 2 //裙子
	DownType_UNKNOWNTYPE   DownType = 3 //未知
)

// Enum value maps for DownType.
var (
	DownType_name = map[int32]string{
		0: "SHORTTROUSERS",
		1: "LONGTROUSERS",
		2: "SKIRT",
		3: "UNKNOWNTYPE",
	}
	DownType_value = map[string]int32{
		"SHORTTROUSERS": 0,
		"LONGTROUSERS":  1,
		"SKIRT":         2,
		"UNKNOWNTYPE":   3,
	}
)

func (x DownType) Enum() *DownType {
	p := new(DownType)
	*p = x
	return p
}

func (x DownType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownType) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[11].Descriptor()
}

func (DownType) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[11]
}

func (x DownType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownType.Descriptor instead.
func (DownType) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{11}
}

type AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE int32

const (
	AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE_CAMERA AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE = 0 // 摄像头
	AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE_CVR    AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE = 1 // cvr
	AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE_DVR    AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE = 2 // dnr
	AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE_NVR    AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE = 3 // nvr
)

// Enum value maps for AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE.
var (
	AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE_name = map[int32]string{
		0: "ALARM_OUTPUT_DEVICE_TYPE_CAMERA",
		1: "ALARM_OUTPUT_DEVICE_TYPE_CVR",
		2: "ALARM_OUTPUT_DEVICE_TYPE_DVR",
		3: "ALARM_OUTPUT_DEVICE_TYPE_NVR",
	}
	AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE_value = map[string]int32{
		"ALARM_OUTPUT_DEVICE_TYPE_CAMERA": 0,
		"ALARM_OUTPUT_DEVICE_TYPE_CVR":    1,
		"ALARM_OUTPUT_DEVICE_TYPE_DVR":    2,
		"ALARM_OUTPUT_DEVICE_TYPE_NVR":    3,
	}
)

func (x AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE) Enum() *AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE {
	p := new(AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE)
	*p = x
	return p
}

func (x AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_hkvision_hkvision_proto_enumTypes[12].Descriptor()
}

func (AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE) Type() protoreflect.EnumType {
	return &file_hkvision_hkvision_proto_enumTypes[12]
}

func (x AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE.Descriptor instead.
func (AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{8, 0}
}

// 报警布防时间
type AlarmTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignDay int32           `protobuf:"varint,1,opt,name=assign_day,json=assignDay,proto3" json:"assign_day,omitempty"` // 星期几
	Times     []*TimeDuration `protobuf:"bytes,2,rep,name=times,proto3" json:"times,omitempty"`                           // 一天中的时间段（最多为8个）
}

func (x *AlarmTime) Reset() {
	*x = AlarmTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmTime) ProtoMessage() {}

func (x *AlarmTime) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmTime.ProtoReflect.Descriptor instead.
func (*AlarmTime) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{0}
}

func (x *AlarmTime) GetAssignDay() int32 {
	if x != nil {
		return x.AssignDay
	}
	return 0
}

func (x *AlarmTime) GetTimes() []*TimeDuration {
	if x != nil {
		return x.Times
	}
	return nil
}

// 报警时间段
type TimeDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHour uint32 `protobuf:"varint,3,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"` // 开始时间 -- 时
	StartMin  uint32 `protobuf:"varint,4,opt,name=start_min,json=startMin,proto3" json:"start_min,omitempty"`    // 开始时间 -- 分
	StopHour  uint32 `protobuf:"varint,5,opt,name=stop_hour,json=stopHour,proto3" json:"stop_hour,omitempty"`    // 结束时间 -- 时
	StopMin   uint32 `protobuf:"varint,6,opt,name=stop_min,json=stopMin,proto3" json:"stop_min,omitempty"`       // 结束时间 -- 分
}

func (x *TimeDuration) Reset() {
	*x = TimeDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeDuration) ProtoMessage() {}

func (x *TimeDuration) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeDuration.ProtoReflect.Descriptor instead.
func (*TimeDuration) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{1}
}

func (x *TimeDuration) GetStartHour() uint32 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

func (x *TimeDuration) GetStartMin() uint32 {
	if x != nil {
		return x.StartMin
	}
	return 0
}

func (x *TimeDuration) GetStopHour() uint32 {
	if x != nil {
		return x.StopHour
	}
	return 0
}

func (x *TimeDuration) GetStopMin() uint32 {
	if x != nil {
		return x.StopMin
	}
	return 0
}

// 点坐标
type CoordinatePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FX float32 `protobuf:"fixed32,1,opt,name=f_x,json=fX,proto3" json:"f_x,omitempty"` // X轴坐标，取值范围[0.001,1]
	FY float32 `protobuf:"fixed32,2,opt,name=f_y,json=fY,proto3" json:"f_y,omitempty"` // Y轴坐标，取值范围[0.001,1]
}

func (x *CoordinatePoint) Reset() {
	*x = CoordinatePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatePoint) ProtoMessage() {}

func (x *CoordinatePoint) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatePoint.ProtoReflect.Descriptor instead.
func (*CoordinatePoint) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{2}
}

func (x *CoordinatePoint) GetFX() float32 {
	if x != nil {
		return x.FX
	}
	return 0
}

func (x *CoordinatePoint) GetFY() float32 {
	if x != nil {
		return x.FY
	}
	return 0
}

// 线坐标
type CoordinateLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPoint *CoordinatePoint `protobuf:"bytes,1,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"` // 起点
	EndPoint   *CoordinatePoint `protobuf:"bytes,2,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`       // 终点
}

func (x *CoordinateLine) Reset() {
	*x = CoordinateLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinateLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinateLine) ProtoMessage() {}

func (x *CoordinateLine) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinateLine.ProtoReflect.Descriptor instead.
func (*CoordinateLine) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{3}
}

func (x *CoordinateLine) GetStartPoint() *CoordinatePoint {
	if x != nil {
		return x.StartPoint
	}
	return nil
}

func (x *CoordinateLine) GetEndPoint() *CoordinatePoint {
	if x != nil {
		return x.EndPoint
	}
	return nil
}

// 多边形区域
type PolygonRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwPointNum uint64             `protobuf:"varint,1,opt,name=dw_pointNum,json=dwPointNum,proto3" json:"dw_pointNum,omitempty"` // 有效点（大于等于3），若是3点在一条线上认为是无效区域，线交叉认为是无效区域
	CoodPoint  []*CoordinatePoint `protobuf:"bytes,2,rep,name=cood_point,json=coodPoint,proto3" json:"cood_point,omitempty"`     // 多边形边界点，最大值为10
}

func (x *PolygonRegion) Reset() {
	*x = PolygonRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonRegion) ProtoMessage() {}

func (x *PolygonRegion) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonRegion.ProtoReflect.Descriptor instead.
func (*PolygonRegion) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{4}
}

func (x *PolygonRegion) GetDwPointNum() uint64 {
	if x != nil {
		return x.DwPointNum
	}
	return 0
}

func (x *PolygonRegion) GetCoodPoint() []*CoordinatePoint {
	if x != nil {
		return x.CoodPoint
	}
	return nil
}

// 目标框
type TargetRect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoordPoint *CoordinatePoint `protobuf:"bytes,1,opt,name=coord_point,json=coordPoint,proto3" json:"coord_point,omitempty"`
	FWidth     float32          `protobuf:"fixed32,2,opt,name=f_width,json=fWidth,proto3" json:"f_width,omitempty"`
	FHeight    float32          `protobuf:"fixed32,3,opt,name=f_height,json=fHeight,proto3" json:"f_height,omitempty"`
}

func (x *TargetRect) Reset() {
	*x = TargetRect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetRect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetRect) ProtoMessage() {}

func (x *TargetRect) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetRect.ProtoReflect.Descriptor instead.
func (*TargetRect) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{5}
}

func (x *TargetRect) GetCoordPoint() *CoordinatePoint {
	if x != nil {
		return x.CoordPoint
	}
	return nil
}

func (x *TargetRect) GetFWidth() float32 {
	if x != nil {
		return x.FWidth
	}
	return 0
}

func (x *TargetRect) GetFHeight() float32 {
	if x != nil {
		return x.FHeight
	}
	return 0
}

// 目标信息
type ActionAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetectionTargetType DETECTION_TARGET `protobuf:"varint,1,opt,name=detection_target_type,json=detectionTargetType,proto3,enum=hkvision.v1.DETECTION_TARGET" json:"detection_target_type,omitempty"` // 目标类型  AI分析、
	PlaneBottom         *CoordinateLine  `protobuf:"bytes,2,opt,name=plane_bottom,json=planeBottom,proto3" json:"plane_bottom,omitempty"`                                                              // 警戒面底边（穿越警戒面用）
	CrossDirection      CrossDirection   `protobuf:"varint,3,opt,name=cross_direction,json=crossDirection,proto3,enum=hkvision.v1.CrossDirection" json:"cross_direction,omitempty"`                    // 穿越方向
	PolygonRegion       *PolygonRegion   `protobuf:"bytes,4,opt,name=polygon_region,json=polygonRegion,proto3" json:"polygon_region,omitempty"`                                                        // 区域范围  (待测试) 区域入侵、进入区域、离开区域
}

func (x *ActionAnalysis) Reset() {
	*x = ActionAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAnalysis) ProtoMessage() {}

func (x *ActionAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAnalysis.ProtoReflect.Descriptor instead.
func (*ActionAnalysis) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{6}
}

func (x *ActionAnalysis) GetDetectionTargetType() DETECTION_TARGET {
	if x != nil {
		return x.DetectionTargetType
	}
	return DETECTION_TARGET_TARGET_PEOPLE
}

func (x *ActionAnalysis) GetPlaneBottom() *CoordinateLine {
	if x != nil {
		return x.PlaneBottom
	}
	return nil
}

func (x *ActionAnalysis) GetCrossDirection() CrossDirection {
	if x != nil {
		return x.CrossDirection
	}
	return CrossDirection_BOTH_DIRECTION
}

func (x *ActionAnalysis) GetPolygonRegion() *PolygonRegion {
	if x != nil {
		return x.PolygonRegion
	}
	return nil
}

// 目标信息
type TargetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId   uint64 `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetRect *RECT  `protobuf:"bytes,2,opt,name=target_rect,json=targetRect,proto3" json:"target_rect,omitempty"`
}

func (x *TargetInfo) Reset() {
	*x = TargetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetInfo) ProtoMessage() {}

func (x *TargetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetInfo.ProtoReflect.Descriptor instead.
func (*TargetInfo) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{7}
}

func (x *TargetInfo) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *TargetInfo) GetTargetRect() *RECT {
	if x != nil {
		return x.TargetRect
	}
	return nil
}

// RabbitMQ 传输协议
type AlarmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUid       string                             `protobuf:"bytes,1,opt,name=device_uid,json=deviceUid,proto3" json:"device_uid,omitempty"`                                                         //设备uid
	DeviceIp        string                             `protobuf:"bytes,2,opt,name=device_ip,json=deviceIp,proto3" json:"device_ip,omitempty"`                                                            //设备ip
	DeviceName      string                             `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`                                                      //设备名称
	DeviceType      AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE `protobuf:"varint,4,opt,name=device_type,json=deviceType,proto3,enum=hkvision.v1.AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE" json:"device_type,omitempty"` //报警设备类型 camera nvr cvr
	TriggerTime     string                             `protobuf:"bytes,5,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`                                                   // 报警触发时间
	AlarmType       AlarmType                          `protobuf:"varint,6,opt,name=alarm_type,json=alarmType,proto3,enum=hkvision.v1.AlarmType" json:"alarm_type,omitempty"`                             // 报警类型
	Target          TargetType                         `protobuf:"varint,7,opt,name=target,proto3,enum=hkvision.v1.TargetType" json:"target,omitempty"`                                                   // 目标类型
	TargetImage     string                             `protobuf:"bytes,8,opt,name=target_image,json=targetImage,proto3" json:"target_image,omitempty"`                                                   // 目标图
	BackImage       string                             `protobuf:"bytes,9,opt,name=back_image,json=backImage,proto3" json:"back_image,omitempty"`                                                         //背景图
	AlarmTargetRect *TargetInfo                        `protobuf:"bytes,10,opt,name=alarm_target_rect,json=alarmTargetRect,proto3" json:"alarm_target_rect,omitempty"`
	ActionAnalysis  *ActionAnalysis                    `protobuf:"bytes,11,opt,name=action_analysis,json=actionAnalysis,proto3" json:"action_analysis,omitempty"` // 行为分析
}

func (x *AlarmInfo) Reset() {
	*x = AlarmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmInfo) ProtoMessage() {}

func (x *AlarmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmInfo.ProtoReflect.Descriptor instead.
func (*AlarmInfo) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{8}
}

func (x *AlarmInfo) GetDeviceUid() string {
	if x != nil {
		return x.DeviceUid
	}
	return ""
}

func (x *AlarmInfo) GetDeviceIp() string {
	if x != nil {
		return x.DeviceIp
	}
	return ""
}

func (x *AlarmInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *AlarmInfo) GetDeviceType() AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE {
	if x != nil {
		return x.DeviceType
	}
	return AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE_CAMERA
}

func (x *AlarmInfo) GetTriggerTime() string {
	if x != nil {
		return x.TriggerTime
	}
	return ""
}

func (x *AlarmInfo) GetAlarmType() AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return AlarmType_MOTION_DETECTION
}

func (x *AlarmInfo) GetTarget() TargetType {
	if x != nil {
		return x.Target
	}
	return TargetType_All_Target
}

func (x *AlarmInfo) GetTargetImage() string {
	if x != nil {
		return x.TargetImage
	}
	return ""
}

func (x *AlarmInfo) GetBackImage() string {
	if x != nil {
		return x.BackImage
	}
	return ""
}

func (x *AlarmInfo) GetAlarmTargetRect() *TargetInfo {
	if x != nil {
		return x.AlarmTargetRect
	}
	return nil
}

func (x *AlarmInfo) GetActionAnalysis() *ActionAnalysis {
	if x != nil {
		return x.ActionAnalysis
	}
	return nil
}

// 联动方式
type LinkageWay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 常规联动
	EnableNo bool `protobuf:"varint,1,opt,name=enable_no,json=enableNo,proto3" json:"enable_no,omitempty"` //无响应
	// bool enable_monitor_alarm = 2;          //监视器上警告
	// bool enable_beep = 3;                   //声音警告
	EnableUpload bool `protobuf:"varint,4,opt,name=enable_upload,json=enableUpload,proto3" json:"enable_upload,omitempty"` //上传中心
	// bool enable_alarm_output = 5;           //触发报警输出
	EnableEmail bool `protobuf:"varint,6,opt,name=enable_email,json=enableEmail,proto3" json:"enable_email,omitempty"` //邮件联动
	// bool enable_wireless_sound_light = 7;   //无线声光报警器联动
	// bool enable_electronic_map = 8;         //联动电子地图(目前仅PCNVR支持)
	EnableFtp bool `protobuf:"varint,9,opt,name=enable_ftp,json=enableFtp,proto3" json:"enable_ftp,omitempty"` //上传ftp
	//	bool enable_cloud = 10;                 //抓图上传到云存储
	//	bool enable_track = 11;                 //跟踪alarm_config
	//
	// 录像和抓图
	EnableRecord  bool `protobuf:"varint,12,opt,name=enable_record,json=enableRecord,proto3" json:"enable_record,omitempty"`    // 录像
	EnableCapture bool `protobuf:"varint,13,opt,name=enable_capture,json=enableCapture,proto3" json:"enable_capture,omitempty"` // 抓图
}

func (x *LinkageWay) Reset() {
	*x = LinkageWay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkageWay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkageWay) ProtoMessage() {}

func (x *LinkageWay) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkageWay.ProtoReflect.Descriptor instead.
func (*LinkageWay) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{9}
}

func (x *LinkageWay) GetEnableNo() bool {
	if x != nil {
		return x.EnableNo
	}
	return false
}

func (x *LinkageWay) GetEnableUpload() bool {
	if x != nil {
		return x.EnableUpload
	}
	return false
}

func (x *LinkageWay) GetEnableEmail() bool {
	if x != nil {
		return x.EnableEmail
	}
	return false
}

func (x *LinkageWay) GetEnableFtp() bool {
	if x != nil {
		return x.EnableFtp
	}
	return false
}

func (x *LinkageWay) GetEnableRecord() bool {
	if x != nil {
		return x.EnableRecord
	}
	return false
}

func (x *LinkageWay) GetEnableCapture() bool {
	if x != nil {
		return x.EnableCapture
	}
	return false
}

// 报警框选行
type MotionDetectX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Y []int32 `protobuf:"varint,1,rep,packed,name=y,proto3" json:"y,omitempty"` // 是否检测 0:不检测 1:检测
}

func (x *MotionDetectX) Reset() {
	*x = MotionDetectX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotionDetectX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotionDetectX) ProtoMessage() {}

func (x *MotionDetectX) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotionDetectX.ProtoReflect.Descriptor instead.
func (*MotionDetectX) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{10}
}

func (x *MotionDetectX) GetY() []int32 {
	if x != nil {
		return x.Y
	}
	return nil
}

// 移动侦测
type MotionDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensitivity        int32            `protobuf:"varint,1,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                                           //灵敏度SDK:[0 1 2 3 4 5] web:[0 20 40 60 80 100]
	EnableHandleMotion bool             `protobuf:"varint,2,opt,name=enable_handle_motion,json=enableHandleMotion,proto3" json:"enable_handle_motion,omitempty"` //是否处理移动侦测
	Xs                 []*MotionDetectX `protobuf:"bytes,3,rep,name=xs,proto3" json:"xs,omitempty"`                                                              // 18行22列
}

func (x *MotionDetection) Reset() {
	*x = MotionDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotionDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotionDetection) ProtoMessage() {}

func (x *MotionDetection) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotionDetection.ProtoReflect.Descriptor instead.
func (*MotionDetection) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{11}
}

func (x *MotionDetection) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *MotionDetection) GetEnableHandleMotion() bool {
	if x != nil {
		return x.EnableHandleMotion
	}
	return false
}

func (x *MotionDetection) GetXs() []*MotionDetectX {
	if x != nil {
		return x.Xs
	}
	return nil
}

// 线
type LINE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPoint *Point `protobuf:"bytes,1,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"`
	EndPoint   *Point `protobuf:"bytes,2,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`
}

func (x *LINE) Reset() {
	*x = LINE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LINE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LINE) ProtoMessage() {}

func (x *LINE) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LINE.ProtoReflect.Descriptor instead.
func (*LINE) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{12}
}

func (x *LINE) GetStartPoint() *Point {
	if x != nil {
		return x.StartPoint
	}
	return nil
}

func (x *LINE) GetEndPoint() *Point {
	if x != nil {
		return x.EndPoint
	}
	return nil
}

// 点
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FX float32 `protobuf:"fixed32,1,opt,name=fX,proto3" json:"fX,omitempty"`
	FY float32 `protobuf:"fixed32,2,opt,name=fY,proto3" json:"fY,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{13}
}

func (x *Point) GetFX() float32 {
	if x != nil {
		return x.FX
	}
	return 0
}

func (x *Point) GetFY() float32 {
	if x != nil {
		return x.FY
	}
	return 0
}

// 划线报警
type LineAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableLineAlarm bool          `protobuf:"varint,1,opt,name=enable_line_alarm,json=enableLineAlarm,proto3" json:"enable_line_alarm,omitempty"`                           //是否处理划线报警0
	Lineation       *LINE         `protobuf:"bytes,2,opt,name=lineation,proto3" json:"lineation,omitempty"`                                                                 // 两个点都是0-1范围内的小数：起始点(0.1, 0.1) 结束点(0.9, 0.9)
	CrossDirection  DirectionType `protobuf:"varint,3,opt,name=cross_direction,json=crossDirection,proto3,enum=hkvision.v1.DirectionType" json:"cross_direction,omitempty"` //划线报警方向
	Sensitivity     int32         `protobuf:"varint,4,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                                                            //划线灵敏度 范围 1-100
	DetectionTarget TargetType    `protobuf:"varint,5,opt,name=detection_target,json=detectionTarget,proto3,enum=hkvision.v1.TargetType" json:"detection_target,omitempty"` //划线报警目标，为智能分析服务提供
}

func (x *LineAlarm) Reset() {
	*x = LineAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineAlarm) ProtoMessage() {}

func (x *LineAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineAlarm.ProtoReflect.Descriptor instead.
func (*LineAlarm) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{14}
}

func (x *LineAlarm) GetEnableLineAlarm() bool {
	if x != nil {
		return x.EnableLineAlarm
	}
	return false
}

func (x *LineAlarm) GetLineation() *LINE {
	if x != nil {
		return x.Lineation
	}
	return nil
}

func (x *LineAlarm) GetCrossDirection() DirectionType {
	if x != nil {
		return x.CrossDirection
	}
	return DirectionType_ABBA
}

func (x *LineAlarm) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *LineAlarm) GetDetectionTarget() TargetType {
	if x != nil {
		return x.DetectionTarget
	}
	return TargetType_All_Target
}

// 区域入侵侦测
type FieldDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableFieldDetection bool       `protobuf:"varint,1,opt,name=enable_field_detection,json=enableFieldDetection,proto3" json:"enable_field_detection,omitempty"`            //是否处理区域侦测
	Polygon              []*Point   `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`                                                                     //四边形，四个点都是0-1范围内的小数：(0.1, 0.1)、(0.9, 0.9)...
	Duration             int32      `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`                                                                  //时间阈值，取设备可选的交集[1 2 3 ... 10]
	Sensitivity          int32      `protobuf:"varint,4,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                                                            //灵敏度[1 2 3 ... 100]
	DetectionTarget      TargetType `protobuf:"varint,5,opt,name=detection_target,json=detectionTarget,proto3,enum=hkvision.v1.TargetType" json:"detection_target,omitempty"` //区域侦测目标，为智能分析服务提供
}

func (x *FieldDetection) Reset() {
	*x = FieldDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDetection) ProtoMessage() {}

func (x *FieldDetection) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDetection.ProtoReflect.Descriptor instead.
func (*FieldDetection) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{15}
}

func (x *FieldDetection) GetEnableFieldDetection() bool {
	if x != nil {
		return x.EnableFieldDetection
	}
	return false
}

func (x *FieldDetection) GetPolygon() []*Point {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *FieldDetection) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FieldDetection) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *FieldDetection) GetDetectionTarget() TargetType {
	if x != nil {
		return x.DetectionTarget
	}
	return TargetType_All_Target
}

// 徘徊
type Loiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableLoiter bool     `protobuf:"varint,1,opt,name=enable_loiter,json=enableLoiter,proto3" json:"enable_loiter,omitempty"` //是否处理徘徊
	Polygon      []*Point `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`                                // 四边形，四个点都是0-1范围内的小数：(0.1, 0.1)、(0.9, 0.9)...
	Sensitivity  int32    `protobuf:"varint,3,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                       // 灵敏度:有的有，有的没有。[1 2 3 ... 100]
	Duration     int32    `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                             // 时间阈值 [1 2 3 ... 10]
}

func (x *Loiter) Reset() {
	*x = Loiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Loiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loiter) ProtoMessage() {}

func (x *Loiter) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loiter.ProtoReflect.Descriptor instead.
func (*Loiter) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{16}
}

func (x *Loiter) GetEnableLoiter() bool {
	if x != nil {
		return x.EnableLoiter
	}
	return false
}

func (x *Loiter) GetPolygon() []*Point {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *Loiter) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *Loiter) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// 进入区域侦测
type EnterField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableEnterField bool       `protobuf:"varint,1,opt,name=enable_enter_field,json=enableEnterField,proto3" json:"enable_enter_field,omitempty"`                        //是否处理区域侦测
	Polygon          []*Point   `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`                                                                     //四边形，四个点都是0-1范围内的小数：(0.1, 0.1)、(0.9, 0.9)...
	Sensitivity      int32      `protobuf:"varint,3,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                                                            //灵敏度:有的有，有的没有。[1 2 3 ... 100]
	DetectionTarget  TargetType `protobuf:"varint,4,opt,name=detection_target,json=detectionTarget,proto3,enum=hkvision.v1.TargetType" json:"detection_target,omitempty"` //区域侦测目标，为智能分析服务提供
}

func (x *EnterField) Reset() {
	*x = EnterField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterField) ProtoMessage() {}

func (x *EnterField) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterField.ProtoReflect.Descriptor instead.
func (*EnterField) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{17}
}

func (x *EnterField) GetEnableEnterField() bool {
	if x != nil {
		return x.EnableEnterField
	}
	return false
}

func (x *EnterField) GetPolygon() []*Point {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *EnterField) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *EnterField) GetDetectionTarget() TargetType {
	if x != nil {
		return x.DetectionTarget
	}
	return TargetType_All_Target
}

// 离开区域侦测
type ExitField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableExitField bool       `protobuf:"varint,1,opt,name=enable_exit_field,json=enableExitField,proto3" json:"enable_exit_field,omitempty"`                           //是否处理区域侦测
	Polygon         []*Point   `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`                                                                     //四边形，四个点都是0-1范围内的小数：(0.1, 0.1)、(0.9, 0.9)...
	Sensitivity     int32      `protobuf:"varint,3,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                                                            //灵敏度:有的有，有的没有。[1 2 3 ... 100]
	DetectionTarget TargetType `protobuf:"varint,4,opt,name=detection_target,json=detectionTarget,proto3,enum=hkvision.v1.TargetType" json:"detection_target,omitempty"` //区域侦测目标，为智能分析服务提供
}

func (x *ExitField) Reset() {
	*x = ExitField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitField) ProtoMessage() {}

func (x *ExitField) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitField.ProtoReflect.Descriptor instead.
func (*ExitField) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{18}
}

func (x *ExitField) GetEnableExitField() bool {
	if x != nil {
		return x.EnableExitField
	}
	return false
}

func (x *ExitField) GetPolygon() []*Point {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *ExitField) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *ExitField) GetDetectionTarget() TargetType {
	if x != nil {
		return x.DetectionTarget
	}
	return TargetType_All_Target
}

// 人员聚集
type HighDensity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableHighDensity bool       `protobuf:"varint,1,opt,name=enable_high_density,json=enableHighDensity,proto3" json:"enable_high_density,omitempty"`                     //是否处理人员聚集
	Polygon           []*Point   `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`                                                                     //四边形，四个点都是0-1范围内的小数：(0.1, 0.1)、(0.9, 0.9)...
	Rate              int32      `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`                                                                          //占比[1 2 3 ... 10]
	DetectionTarget   TargetType `protobuf:"varint,5,opt,name=detection_target,json=detectionTarget,proto3,enum=hkvision.v1.TargetType" json:"detection_target,omitempty"` //划线报警目标，为智能分析服务提供
}

func (x *HighDensity) Reset() {
	*x = HighDensity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighDensity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighDensity) ProtoMessage() {}

func (x *HighDensity) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighDensity.ProtoReflect.Descriptor instead.
func (*HighDensity) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{19}
}

func (x *HighDensity) GetEnableHighDensity() bool {
	if x != nil {
		return x.EnableHighDensity
	}
	return false
}

func (x *HighDensity) GetPolygon() []*Point {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *HighDensity) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *HighDensity) GetDetectionTarget() TargetType {
	if x != nil {
		return x.DetectionTarget
	}
	return TargetType_All_Target
}

// 物品遗留
type BaggageLeft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableBaggageLeft bool       `protobuf:"varint,1,opt,name=enable_baggage_left,json=enableBaggageLeft,proto3" json:"enable_baggage_left,omitempty"`                     //是否处理物品遗留
	Polygon           []*Point   `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`                                                                     //四边形，四个点都是0-1范围内的小数：(0.1, 0.1)、(0.9, 0.9)...
	Sensitivity       int32      `protobuf:"varint,3,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                                                            //灵敏度[1 2 3 ... 100]
	Duration          int32      `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                                                                  //时间阈值 5-20 or 5-100，先使用 5-20，后续优化
	DetectionTarget   TargetType `protobuf:"varint,5,opt,name=detection_target,json=detectionTarget,proto3,enum=hkvision.v1.TargetType" json:"detection_target,omitempty"` //划线报警目标，为智能分析服务提供
}

func (x *BaggageLeft) Reset() {
	*x = BaggageLeft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaggageLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaggageLeft) ProtoMessage() {}

func (x *BaggageLeft) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaggageLeft.ProtoReflect.Descriptor instead.
func (*BaggageLeft) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{20}
}

func (x *BaggageLeft) GetEnableBaggageLeft() bool {
	if x != nil {
		return x.EnableBaggageLeft
	}
	return false
}

func (x *BaggageLeft) GetPolygon() []*Point {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *BaggageLeft) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *BaggageLeft) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BaggageLeft) GetDetectionTarget() TargetType {
	if x != nil {
		return x.DetectionTarget
	}
	return TargetType_All_Target
}

// 物品拿取
type BaggageTake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableBaggageTake bool       `protobuf:"varint,1,opt,name=enable_baggage_take,json=enableBaggageTake,proto3" json:"enable_baggage_take,omitempty"`                     //是否处理物品拿取
	Polygon           []*Point   `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`                                                                     //四边形，四个点都是0-1范围内的小数：(0.1, 0.1)、(0.9, 0.9)...
	Sensitivity       int32      `protobuf:"varint,3,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                                                            //灵敏度[1 2 3 ... 100]
	Duration          int32      `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                                                                  //时间阈值 5-20 or 5-100，先使用 5-20，后续优化
	DetectionTarget   TargetType `protobuf:"varint,5,opt,name=detection_target,json=detectionTarget,proto3,enum=hkvision.v1.TargetType" json:"detection_target,omitempty"` //划线报警目标，为智能分析服务提供
}

func (x *BaggageTake) Reset() {
	*x = BaggageTake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaggageTake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaggageTake) ProtoMessage() {}

func (x *BaggageTake) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaggageTake.ProtoReflect.Descriptor instead.
func (*BaggageTake) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{21}
}

func (x *BaggageTake) GetEnableBaggageTake() bool {
	if x != nil {
		return x.EnableBaggageTake
	}
	return false
}

func (x *BaggageTake) GetPolygon() []*Point {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *BaggageTake) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *BaggageTake) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BaggageTake) GetDetectionTarget() TargetType {
	if x != nil {
		return x.DetectionTarget
	}
	return TargetType_All_Target
}

// 停车侦测
type Parking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableParking bool     `protobuf:"varint,1,opt,name=enable_parking,json=enableParking,proto3" json:"enable_parking,omitempty"` //是否处理停车侦测
	Polygon       []*Point `protobuf:"bytes,2,rep,name=polygon,proto3" json:"polygon,omitempty"`                                   //四边形，四个点都是0-1范围内的小数：(0.1, 0.1)、(0.9, 0.9)...
	Sensitivity   int32    `protobuf:"varint,3,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                          //灵敏度[1 2 3 ... 100]
	Duration      int32    `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                                //时间阈值 5-20 or 5-100，先使用 5-20，后续优化
}

func (x *Parking) Reset() {
	*x = Parking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parking) ProtoMessage() {}

func (x *Parking) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parking.ProtoReflect.Descriptor instead.
func (*Parking) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{22}
}

func (x *Parking) GetEnableParking() bool {
	if x != nil {
		return x.EnableParking
	}
	return false
}

func (x *Parking) GetPolygon() []*Point {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *Parking) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *Parking) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// 遮挡
type Shelter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableShelter bool    `protobuf:"varint,1,opt,name=enable_shelter,json=enableShelter,proto3" json:"enable_shelter,omitempty"` //是否处理遮挡
	Region        *Point  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`                                     // 区域坐标
	Width         float32 `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`                                     // 区域宽度 0-704
	Height        float32 `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`                                   // 区域高度 0-576
	Sensitivity   int32   `protobuf:"varint,5,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                          // 灵敏度 0- 否，1- 低灵敏度，2- 中灵敏度，3- 高灵敏度
}

func (x *Shelter) Reset() {
	*x = Shelter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shelter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shelter) ProtoMessage() {}

func (x *Shelter) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shelter.ProtoReflect.Descriptor instead.
func (*Shelter) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{23}
}

func (x *Shelter) GetEnableShelter() bool {
	if x != nil {
		return x.EnableShelter
	}
	return false
}

func (x *Shelter) GetRegion() *Point {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Shelter) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Shelter) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Shelter) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

// 报警区域
type ROIRegionParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points    []*Point       `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`                                        // 范围：2-5
	Direction CrossDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=hkvision.v1.CrossDirection" json:"direction,omitempty"` // 目前选BOTH_DIRECTION
	Duration  int32          `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                                   // Intrusion Param :0-10s
}

func (x *ROIRegionParam) Reset() {
	*x = ROIRegionParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROIRegionParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIRegionParam) ProtoMessage() {}

func (x *ROIRegionParam) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIRegionParam.ProtoReflect.Descriptor instead.
func (*ROIRegionParam) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{24}
}

func (x *ROIRegionParam) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *ROIRegionParam) GetDirection() CrossDirection {
	if x != nil {
		return x.Direction
	}
	return CrossDirection_BOTH_DIRECTION
}

func (x *ROIRegionParam) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// 智能分析服务-报警配置数据结构
type SmartParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RioRegions  []*ROIRegionParam `protobuf:"bytes,1,rep,name=rio_regions,json=rioRegions,proto3" json:"rio_regions,omitempty"` //多个区域信息
	Enable      bool              `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`                          // 是否开启
	Sensitivity int32             `protobuf:"varint,3,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                // 灵敏度
}

func (x *SmartParam) Reset() {
	*x = SmartParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartParam) ProtoMessage() {}

func (x *SmartParam) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartParam.ProtoReflect.Descriptor instead.
func (*SmartParam) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{25}
}

func (x *SmartParam) GetRioRegions() []*ROIRegionParam {
	if x != nil {
		return x.RioRegions
	}
	return nil
}

func (x *SmartParam) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *SmartParam) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

// 报警配置
type AlarmConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmType  AlarmType    `protobuf:"varint,1,opt,name=alarm_type,json=alarmType,proto3,enum=hkvision.v1.AlarmType" json:"alarm_type,omitempty"` //报警类型
	AlarmTime  []*AlarmTime `protobuf:"bytes,2,rep,name=alarm_time,json=alarmTime,proto3" json:"alarm_time,omitempty"`                             // 报警布放时间（从周一到周日）
	LinkageWay *LinkageWay  `protobuf:"bytes,3,opt,name=linkage_way,json=linkageWay,proto3" json:"linkage_way,omitempty"`                          // 联动方式
	Config     *anypb.Any   `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`                                                    //报警配置
}

func (x *AlarmConfig) Reset() {
	*x = AlarmConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmConfig) ProtoMessage() {}

func (x *AlarmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmConfig.ProtoReflect.Descriptor instead.
func (*AlarmConfig) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{26}
}

func (x *AlarmConfig) GetAlarmType() AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return AlarmType_MOTION_DETECTION
}

func (x *AlarmConfig) GetAlarmTime() []*AlarmTime {
	if x != nil {
		return x.AlarmTime
	}
	return nil
}

func (x *AlarmConfig) GetLinkageWay() *LinkageWay {
	if x != nil {
		return x.LinkageWay
	}
	return nil
}

func (x *AlarmConfig) GetConfig() *anypb.Any {
	if x != nil {
		return x.Config
	}
	return nil
}

// 车辆检测
type VehicleDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableVehicleDetect bool    `protobuf:"varint,1,opt,name=enable_vehicle_detect,json=enableVehicleDetect,proto3" json:"enable_vehicle_detect,omitempty"` //是否开启车辆检测
	VehicleDetectLine   []*LINE `protobuf:"bytes,2,rep,name=vehicle_detect_line,json=vehicleDetectLine,proto3" json:"vehicle_detect_line,omitempty"`        //车辆检测区域
}

func (x *VehicleDetect) Reset() {
	*x = VehicleDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleDetect) ProtoMessage() {}

func (x *VehicleDetect) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleDetect.ProtoReflect.Descriptor instead.
func (*VehicleDetect) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{27}
}

func (x *VehicleDetect) GetEnableVehicleDetect() bool {
	if x != nil {
		return x.EnableVehicleDetect
	}
	return false
}

func (x *VehicleDetect) GetVehicleDetectLine() []*LINE {
	if x != nil {
		return x.VehicleDetectLine
	}
	return nil
}

// 车牌检测
type VehicleDetectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  VehicleType `protobuf:"varint,1,opt,name=type,proto3,enum=hkvision.v1.VehicleType" json:"type,omitempty"` //车辆类型
	Plate []byte      `protobuf:"bytes,2,opt,name=plate,proto3" json:"plate,omitempty"`                             //车牌号
	Color Color       `protobuf:"varint,3,opt,name=color,proto3,enum=hkvision.v1.Color" json:"color,omitempty"`     //车辆颜色
	Brand []byte      `protobuf:"bytes,4,opt,name=brand,proto3" json:"brand,omitempty"`                             //车辆品牌
}

func (x *VehicleDetectInfo) Reset() {
	*x = VehicleDetectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleDetectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleDetectInfo) ProtoMessage() {}

func (x *VehicleDetectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleDetectInfo.ProtoReflect.Descriptor instead.
func (*VehicleDetectInfo) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{28}
}

func (x *VehicleDetectInfo) GetType() VehicleType {
	if x != nil {
		return x.Type
	}
	return VehicleType_CAR
}

func (x *VehicleDetectInfo) GetPlate() []byte {
	if x != nil {
		return x.Plate
	}
	return nil
}

func (x *VehicleDetectInfo) GetColor() Color {
	if x != nil {
		return x.Color
	}
	return Color_BLUE
}

func (x *VehicleDetectInfo) GetBrand() []byte {
	if x != nil {
		return x.Brand
	}
	return nil
}

// 目标框
type RECT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FX      float32 `protobuf:"fixed32,1,opt,name=fX,proto3" json:"fX,omitempty"`           //中心点x坐标
	FY      float32 `protobuf:"fixed32,2,opt,name=fY,proto3" json:"fY,omitempty"`           //中心点y坐标
	FWidth  float32 `protobuf:"fixed32,3,opt,name=fWidth,proto3" json:"fWidth,omitempty"`   //目标框长度
	FHeight float32 `protobuf:"fixed32,4,opt,name=fHeight,proto3" json:"fHeight,omitempty"` //目标框宽度
}

func (x *RECT) Reset() {
	*x = RECT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RECT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RECT) ProtoMessage() {}

func (x *RECT) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RECT.ProtoReflect.Descriptor instead.
func (*RECT) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{29}
}

func (x *RECT) GetFX() float32 {
	if x != nil {
		return x.FX
	}
	return 0
}

func (x *RECT) GetFY() float32 {
	if x != nil {
		return x.FY
	}
	return 0
}

func (x *RECT) GetFWidth() float32 {
	if x != nil {
		return x.FWidth
	}
	return 0
}

func (x *RECT) GetFHeight() float32 {
	if x != nil {
		return x.FHeight
	}
	return 0
}

// 人脸检测配置
type FaceSnap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableFaceSnap   bool     `protobuf:"varint,1,opt,name=enable_face_snap,json=enableFaceSnap,proto3" json:"enable_face_snap,omitempty"`        //是否开启人脸检测
	PupileRegion     *RECT    `protobuf:"bytes,2,opt,name=pupile_region,json=pupileRegion,proto3" json:"pupile_region,omitempty"`                 //最小瞳距区域
	FaceSnapRect     []*Point `protobuf:"bytes,3,rep,name=face_snap_rect,json=faceSnapRect,proto3" json:"face_snap_rect,omitempty"`               //人脸检测区域
	MaskFaceSnapRect []*Point `protobuf:"bytes,4,rep,name=mask_face_snap_rect,json=maskFaceSnapRect,proto3" json:"mask_face_snap_rect,omitempty"` //人脸不检测区域
	SnapInterval     int32    `protobuf:"varint,5,opt,name=snap_interval,json=snapInterval,proto3" json:"snap_interval,omitempty"`                // 抓拍间隔(4-255)
	SnapTimes        int32    `protobuf:"varint,6,opt,name=snap_times,json=snapTimes,proto3" json:"snap_times,omitempty"`                         //抓拍次数(1-5)
	Sensitivity      int32    `protobuf:"varint,7,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                                      //灵敏度(1-5)
	SnapThreshold    int32    `protobuf:"varint,8,opt,name=snap_threshold,json=snapThreshold,proto3" json:"snap_threshold,omitempty"`             // 抓拍阈值(0-100)
	GenerateRate     int32    `protobuf:"varint,9,opt,name=generate_rate,json=generateRate,proto3" json:"generate_rate,omitempty"`                //目标生成速度(1-5)
	CatchQuality     []byte   `protobuf:"bytes,10,opt,name=catch_quality,json=catchQuality,proto3" json:"catch_quality,omitempty"`                //抓图质量(高、中、低)
}

func (x *FaceSnap) Reset() {
	*x = FaceSnap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceSnap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceSnap) ProtoMessage() {}

func (x *FaceSnap) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceSnap.ProtoReflect.Descriptor instead.
func (*FaceSnap) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{30}
}

func (x *FaceSnap) GetEnableFaceSnap() bool {
	if x != nil {
		return x.EnableFaceSnap
	}
	return false
}

func (x *FaceSnap) GetPupileRegion() *RECT {
	if x != nil {
		return x.PupileRegion
	}
	return nil
}

func (x *FaceSnap) GetFaceSnapRect() []*Point {
	if x != nil {
		return x.FaceSnapRect
	}
	return nil
}

func (x *FaceSnap) GetMaskFaceSnapRect() []*Point {
	if x != nil {
		return x.MaskFaceSnapRect
	}
	return nil
}

func (x *FaceSnap) GetSnapInterval() int32 {
	if x != nil {
		return x.SnapInterval
	}
	return 0
}

func (x *FaceSnap) GetSnapTimes() int32 {
	if x != nil {
		return x.SnapTimes
	}
	return 0
}

func (x *FaceSnap) GetSensitivity() int32 {
	if x != nil {
		return x.Sensitivity
	}
	return 0
}

func (x *FaceSnap) GetSnapThreshold() int32 {
	if x != nil {
		return x.SnapThreshold
	}
	return 0
}

func (x *FaceSnap) GetGenerateRate() int32 {
	if x != nil {
		return x.GenerateRate
	}
	return 0
}

func (x *FaceSnap) GetCatchQuality() []byte {
	if x != nil {
		return x.CatchQuality
	}
	return nil
}

// 人脸检测信息
type FaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgeGroup       HumanAge       `protobuf:"varint,1,opt,name=age_group,json=ageGroup,proto3,enum=hkvision.v1.HumanAge" json:"age_group,omitempty"`                         //年龄段
	Age            int32          `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`                                                                             //年龄
	Sex            int32          `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`                                                                             // 1-男；2-女
	IsEyeGlass     bool           `protobuf:"varint,4,opt,name=is_eye_glass,json=isEyeGlass,proto3" json:"is_eye_glass,omitempty"`                                           //是否戴眼镜：1- 不戴；2- 戴
	Mask           int32          `protobuf:"varint,5,opt,name=mask,proto3" json:"mask,omitempty"`                                                                           //是否戴口罩：0-表示“未知”；1- 不戴口罩；2-戴口罩；
	FaceExpression FaceExpression `protobuf:"varint,6,opt,name=face_expression,json=faceExpression,proto3,enum=hkvision.v1.FaceExpression" json:"face_expression,omitempty"` // 表情
	Hat            int32          `protobuf:"varint,7,opt,name=hat,proto3" json:"hat,omitempty"`                                                                             //帽子：0- 不支持；1- 不戴帽子；2- 戴帽子
}

func (x *FaceInfo) Reset() {
	*x = FaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceInfo) ProtoMessage() {}

func (x *FaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceInfo.ProtoReflect.Descriptor instead.
func (*FaceInfo) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{31}
}

func (x *FaceInfo) GetAgeGroup() HumanAge {
	if x != nil {
		return x.AgeGroup
	}
	return HumanAge_INFANT
}

func (x *FaceInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *FaceInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *FaceInfo) GetIsEyeGlass() bool {
	if x != nil {
		return x.IsEyeGlass
	}
	return false
}

func (x *FaceInfo) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *FaceInfo) GetFaceExpression() FaceExpression {
	if x != nil {
		return x.FaceExpression
	}
	return FaceExpression_SURPRISED
}

func (x *FaceInfo) GetHat() int32 {
	if x != nil {
		return x.Hat
	}
	return 0
}

// 人体检测配置
type HumanInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceInfo  *FaceInfo `protobuf:"bytes,2,opt,name=face_info,json=faceInfo,proto3" json:"face_info,omitempty"`                            //人脸信息
	HairType  int32     `protobuf:"varint,3,opt,name=hair_type,json=hairType,proto3" json:"hair_type,omitempty"`                           // 0-表示“未知”；1- 长发；2-短发
	Bag       bool      `protobuf:"varint,4,opt,name=bag,proto3" json:"bag,omitempty"`                                                     //是否背包：0- 不支持；1- 不背；2- 背包
	UpColor   Color     `protobuf:"varint,5,opt,name=up_color,json=upColor,proto3,enum=hkvision.v1.Color" json:"up_color,omitempty"`       //上衣颜色
	UpType    UpType    `protobuf:"varint,6,opt,name=up_type,json=upType,proto3,enum=hkvision.v1.UpType" json:"up_type,omitempty"`         //上衣类型
	DownColor Color     `protobuf:"varint,7,opt,name=down_color,json=downColor,proto3,enum=hkvision.v1.Color" json:"down_color,omitempty"` //下衣颜色
	DownType  DownType  `protobuf:"varint,8,opt,name=down_type,json=downType,proto3,enum=hkvision.v1.DownType" json:"down_type,omitempty"` //下衣类型
}

func (x *HumanInfos) Reset() {
	*x = HumanInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanInfos) ProtoMessage() {}

func (x *HumanInfos) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanInfos.ProtoReflect.Descriptor instead.
func (*HumanInfos) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{32}
}

func (x *HumanInfos) GetFaceInfo() *FaceInfo {
	if x != nil {
		return x.FaceInfo
	}
	return nil
}

func (x *HumanInfos) GetHairType() int32 {
	if x != nil {
		return x.HairType
	}
	return 0
}

func (x *HumanInfos) GetBag() bool {
	if x != nil {
		return x.Bag
	}
	return false
}

func (x *HumanInfos) GetUpColor() Color {
	if x != nil {
		return x.UpColor
	}
	return Color_BLUE
}

func (x *HumanInfos) GetUpType() UpType {
	if x != nil {
		return x.UpType
	}
	return UpType_SHORTSLEEVE
}

func (x *HumanInfos) GetDownColor() Color {
	if x != nil {
		return x.DownColor
	}
	return Color_BLUE
}

func (x *HumanInfos) GetDownType() DownType {
	if x != nil {
		return x.DownType
	}
	return DownType_SHORTTROUSERS
}

// 混合目标检测配置
type MixedTargetDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableMixedTergetDetect bool   `protobuf:"varint,1,opt,name=enable_mixed_terget_detect,json=enableMixedTergetDetect,proto3" json:"enable_mixed_terget_detect,omitempty"` //是否开启人体检测
	MixedTergetDetectRect   *RECT  `protobuf:"bytes,2,opt,name=mixed_terget_detect_rect,json=mixedTergetDetectRect,proto3" json:"mixed_terget_detect_rect,omitempty"`        //人检测区域
	PupileRegion            *RECT  `protobuf:"bytes,3,opt,name=pupile_region,json=pupileRegion,proto3" json:"pupile_region,omitempty"`                                       //最小瞳距区域
	Province                int32  `protobuf:"varint,4,opt,name=province,proto3" json:"province,omitempty"`                                                                  //检测的省份
	PictureQuality          []byte `protobuf:"bytes,5,opt,name=picture_quality,json=pictureQuality,proto3" json:"picture_quality,omitempty"`                                 //图片质量
	RuleId                  int32  `protobuf:"varint,6,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`                                                        //规则编号
	RuleModel               string `protobuf:"bytes,7,opt,name=rule_model,json=ruleModel,proto3" json:"rule_model,omitempty"`                                                //检测模型
}

func (x *MixedTargetDetection) Reset() {
	*x = MixedTargetDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedTargetDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedTargetDetection) ProtoMessage() {}

func (x *MixedTargetDetection) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedTargetDetection.ProtoReflect.Descriptor instead.
func (*MixedTargetDetection) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{33}
}

func (x *MixedTargetDetection) GetEnableMixedTergetDetect() bool {
	if x != nil {
		return x.EnableMixedTergetDetect
	}
	return false
}

func (x *MixedTargetDetection) GetMixedTergetDetectRect() *RECT {
	if x != nil {
		return x.MixedTergetDetectRect
	}
	return nil
}

func (x *MixedTargetDetection) GetPupileRegion() *RECT {
	if x != nil {
		return x.PupileRegion
	}
	return nil
}

func (x *MixedTargetDetection) GetProvince() int32 {
	if x != nil {
		return x.Province
	}
	return 0
}

func (x *MixedTargetDetection) GetPictureQuality() []byte {
	if x != nil {
		return x.PictureQuality
	}
	return nil
}

func (x *MixedTargetDetection) GetRuleId() int32 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *MixedTargetDetection) GetRuleModel() string {
	if x != nil {
		return x.RuleModel
	}
	return ""
}

// 设置报警类型请求结果
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateCode bool   `protobuf:"varint,1,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"` // 请求执行结果 true-成功 false-失败
	ErrorMsg  string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`     // 错误信息
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{34}
}

func (x *State) GetStateCode() bool {
	if x != nil {
		return x.StateCode
	}
	return false
}

func (x *State) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 获取设备报警事件能力
type GetEventAbilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUid string `protobuf:"bytes,1,opt,name=device_uid,json=deviceUid,proto3" json:"device_uid,omitempty"` //设备uid
}

func (x *GetEventAbilityRequest) Reset() {
	*x = GetEventAbilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventAbilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventAbilityRequest) ProtoMessage() {}

func (x *GetEventAbilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventAbilityRequest.ProtoReflect.Descriptor instead.
func (*GetEventAbilityRequest) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{35}
}

func (x *GetEventAbilityRequest) GetDeviceUid() string {
	if x != nil {
		return x.DeviceUid
	}
	return ""
}

// 获取设备报警事件能力返回
type GetEventAbilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmType []AlarmType `protobuf:"varint,1,rep,packed,name=alarm_type,json=alarmType,proto3,enum=hkvision.v1.AlarmType" json:"alarm_type,omitempty"` //报警类型
	State     *State      `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`                                                             //请求执行结果
}

func (x *GetEventAbilityResponse) Reset() {
	*x = GetEventAbilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventAbilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventAbilityResponse) ProtoMessage() {}

func (x *GetEventAbilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventAbilityResponse.ProtoReflect.Descriptor instead.
func (*GetEventAbilityResponse) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{36}
}

func (x *GetEventAbilityResponse) GetAlarmType() []AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return nil
}

func (x *GetEventAbilityResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

// 获取设备报警配置请求
type GetDeviceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUid   string    `protobuf:"bytes,1,opt,name=device_uid,json=deviceUid,proto3" json:"device_uid,omitempty"`                             //设备uid
	AlarmType   AlarmType `protobuf:"varint,2,opt,name=alarm_type,json=alarmType,proto3,enum=hkvision.v1.AlarmType" json:"alarm_type,omitempty"` //报警类型
	PresetIndex uint32    `protobuf:"varint,3,opt,name=preset_index,json=presetIndex,proto3" json:"preset_index,omitempty"`                      //预置点号
}

func (x *GetDeviceConfigRequest) Reset() {
	*x = GetDeviceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceConfigRequest) ProtoMessage() {}

func (x *GetDeviceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceConfigRequest) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{37}
}

func (x *GetDeviceConfigRequest) GetDeviceUid() string {
	if x != nil {
		return x.DeviceUid
	}
	return ""
}

func (x *GetDeviceConfigRequest) GetAlarmType() AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return AlarmType_MOTION_DETECTION
}

func (x *GetDeviceConfigRequest) GetPresetIndex() uint32 {
	if x != nil {
		return x.PresetIndex
	}
	return 0
}

// 获取设备报警配置返回
type GetDeviceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmConfig *AlarmConfig `protobuf:"bytes,1,opt,name=alarm_config,json=alarmConfig,proto3" json:"alarm_config,omitempty"` //报警配置
	State       *State       `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`                                //请求执行结果
}

func (x *GetDeviceConfigResponse) Reset() {
	*x = GetDeviceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceConfigResponse) ProtoMessage() {}

func (x *GetDeviceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceConfigResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceConfigResponse) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{38}
}

func (x *GetDeviceConfigResponse) GetAlarmConfig() *AlarmConfig {
	if x != nil {
		return x.AlarmConfig
	}
	return nil
}

func (x *GetDeviceConfigResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

// 设置报警配置请求
type SetDeviceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUid   string       `protobuf:"bytes,1,opt,name=device_uid,json=deviceUid,proto3" json:"device_uid,omitempty"`                             //设备uid
	AlarmType   AlarmType    `protobuf:"varint,2,opt,name=alarm_type,json=alarmType,proto3,enum=hkvision.v1.AlarmType" json:"alarm_type,omitempty"` //报警类型
	PresetIndex uint32       `protobuf:"varint,3,opt,name=preset_index,json=presetIndex,proto3" json:"preset_index,omitempty"`                      // 预置点号
	AlarmConfig *AlarmConfig `protobuf:"bytes,4,opt,name=alarm_config,json=alarmConfig,proto3" json:"alarm_config,omitempty"`                       //报警配置
}

func (x *SetDeviceConfigRequest) Reset() {
	*x = SetDeviceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceConfigRequest) ProtoMessage() {}

func (x *SetDeviceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceConfigRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceConfigRequest) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{39}
}

func (x *SetDeviceConfigRequest) GetDeviceUid() string {
	if x != nil {
		return x.DeviceUid
	}
	return ""
}

func (x *SetDeviceConfigRequest) GetAlarmType() AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return AlarmType_MOTION_DETECTION
}

func (x *SetDeviceConfigRequest) GetPresetIndex() uint32 {
	if x != nil {
		return x.PresetIndex
	}
	return 0
}

func (x *SetDeviceConfigRequest) GetAlarmConfig() *AlarmConfig {
	if x != nil {
		return x.AlarmConfig
	}
	return nil
}

// 设置报警配置返回
type SetDeviceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"` //请求执行结果
}

func (x *SetDeviceConfigResponse) Reset() {
	*x = SetDeviceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hkvision_hkvision_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceConfigResponse) ProtoMessage() {}

func (x *SetDeviceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hkvision_hkvision_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceConfigResponse.ProtoReflect.Descriptor instead.
func (*SetDeviceConfigResponse) Descriptor() ([]byte, []int) {
	return file_hkvision_hkvision_proto_rawDescGZIP(), []int{40}
}

func (x *SetDeviceConfigResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

var File_hkvision_hkvision_proto protoreflect.FileDescriptor

var file_hkvision_hkvision_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6b, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x6b, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5b, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x4d, 0x69, 0x6e, 0x22, 0x33, 0x0a, 0x0f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x66, 0x5f, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x58, 0x12, 0x0f, 0x0a, 0x03, 0x66, 0x5f, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x59, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x77, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x77, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x6b,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6f, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x66, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x52, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x44, 0x0a, 0x0f, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x6b, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x45, 0x43, 0x54, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x74, 0x22, 0xba, 0x05, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x4c, 0x41, 0x52,
	0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x68, 0x6b, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a,
	0x11, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x6b,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x41, 0x4c, 0x41,
	0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x56, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x56, 0x52, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x56, 0x52, 0x10, 0x03,
	0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x61, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x74, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x74, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x1d, 0x0a, 0x0d, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x58,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x91,
	0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x78, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x58, 0x52, 0x02,
	0x78, 0x73, 0x22, 0x6c, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x45, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x27, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x58, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x58, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x59, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x59, 0x22, 0x93, 0x02, 0x0a, 0x09, 0x4c, 0x69,
	0x6e, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x49, 0x4e, 0x45, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0xf6, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x70,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x69,
	0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x69, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x70,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x68, 0x6b,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x42, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x68, 0x6b, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x48, 0x69, 0x67, 0x68, 0x44, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x67, 0x68, 0x44, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x0b, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x0b, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07,
	0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x07, 0x53, 0x68, 0x65,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x68, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x52, 0x4f, 0x49, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x6b, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01,
	0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x0b,
	0x72, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x4f, 0x49, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a,
	0x72, 0x69, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x61, 0x79,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x12, 0x41, 0x0a, 0x13, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x49, 0x4e, 0x45,
	0x52, 0x11, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x68,
	0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x58, 0x0a,
	0x04, 0x52, 0x45, 0x43, 0x54, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x66, 0x58, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x66, 0x59, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x66, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc0, 0x03, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x12, 0x36,
	0x0a, 0x0d, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x45, 0x43, 0x54, 0x52, 0x0c, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x63, 0x74,
	0x12, 0x41, 0x0a, 0x13, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x52,
	0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6e,
	0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x63, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xf0, 0x01, 0x0a, 0x08, 0x46,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x6b, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x41, 0x67,
	0x65, 0x52, 0x08, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x79, 0x65, 0x47, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x63,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x61, 0x63,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x68,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x68, 0x61, 0x74, 0x22, 0xb3, 0x02,
	0x0a, 0x0a, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x09,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x61, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x61, 0x67, 0x12,
	0x2d, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x07, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x14, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x54, 0x65, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x18, 0x6d, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x6b,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x45, 0x43, 0x54, 0x52, 0x15,
	0x6d, 0x69, 0x78, 0x65, 0x64, 0x54, 0x65, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x45, 0x43, 0x54, 0x52,
	0x0c, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x43, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x35,
	0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x6b, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x6b, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x3b, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x43, 0x0a, 0x17,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2a, 0xe1, 0x03, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48, 0x45, 0x4c, 0x54, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x4f, 0x49, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x49, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x44, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41,
	0x47, 0x47, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x41, 0x47, 0x47, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x09, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x41, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x49, 0x58, 0x45,
	0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x4d, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x58, 0x49,
	0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4d, 0x41,
	0x52, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x5f, 0x4d, 0x49, 0x58, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x4f,
	0x41, 0x54, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4c,
	0x4f, 0x53, 0x53, 0x10, 0x16, 0x2a, 0x2b, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x42, 0x42, 0x41, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x5f, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x5f, 0x41,
	0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x41,
	0x54, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x46,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x2a,
	0x47, 0x0a, 0x10, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x45,
	0x4f, 0x50, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x43, 0x41, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x52, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x55, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x55, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52,
	0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x03, 0x2a, 0x5e, 0x0a, 0x05, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x48, 0x49,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x78, 0x0a, 0x08, 0x48, 0x75,
	0x6d, 0x61, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x46, 0x41, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x59, 0x4f, 0x55, 0x4e, 0x47, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x44, 0x4f, 0x4c, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x59, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x4d, 0x45,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x44, 0x4c, 0x49, 0x46, 0x45, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x44, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x4f,
	0x4c, 0x44, 0x10, 0x08, 0x2a, 0x64, 0x0a, 0x0e, 0x46, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x52, 0x50, 0x52, 0x49,
	0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x47, 0x55, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x48, 0x41, 0x50, 0x50, 0x59, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x41, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4e, 0x47, 0x52, 0x59, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x06, 0x2a, 0x26, 0x0a, 0x10, 0x46, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x01, 0x2a, 0x36, 0x0a, 0x06, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x53, 0x4c, 0x45, 0x45, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x4f, 0x4e, 0x47, 0x53, 0x4c, 0x45, 0x45, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x08, 0x44, 0x6f,
	0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x54,
	0x52, 0x4f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x4e,
	0x47, 0x54, 0x52, 0x4f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x4b, 0x49, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x32, 0xb1, 0x02, 0x0a, 0x0f, 0x48, 0x4b, 0x56, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23,
	0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23,
	0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2f,
	0x67, 0x6f, 0x2f, 0x68, 0x6b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hkvision_hkvision_proto_rawDescOnce sync.Once
	file_hkvision_hkvision_proto_rawDescData = file_hkvision_hkvision_proto_rawDesc
)

func file_hkvision_hkvision_proto_rawDescGZIP() []byte {
	file_hkvision_hkvision_proto_rawDescOnce.Do(func() {
		file_hkvision_hkvision_proto_rawDescData = protoimpl.X.CompressGZIP(file_hkvision_hkvision_proto_rawDescData)
	})
	return file_hkvision_hkvision_proto_rawDescData
}

var file_hkvision_hkvision_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_hkvision_hkvision_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_hkvision_hkvision_proto_goTypes = []interface{}{
	(AlarmType)(0),                          // 0: hkvision.v1.AlarmType
	(DirectionType)(0),                      // 1: hkvision.v1.DirectionType
	(TargetType)(0),                         // 2: hkvision.v1.TargetType
	(CrossDirection)(0),                     // 3: hkvision.v1.CrossDirection
	(DETECTION_TARGET)(0),                   // 4: hkvision.v1.DETECTION_TARGET
	(VehicleType)(0),                        // 5: hkvision.v1.VehicleType
	(Color)(0),                              // 6: hkvision.v1.Color
	(HumanAge)(0),                           // 7: hkvision.v1.HumanAge
	(FaceExpression)(0),                     // 8: hkvision.v1.FaceExpression
	(FaceComparedType)(0),                   // 9: hkvision.v1.FaceComparedType
	(UpType)(0),                             // 10: hkvision.v1.UpType
	(DownType)(0),                           // 11: hkvision.v1.DownType
	(AlarmInfo_ALARM_OUTPUT_DEVICE_TYPE)(0), // 12: hkvision.v1.AlarmInfo.ALARM_OUTPUT_DEVICE_TYPE
	(*AlarmTime)(nil),                       // 13: hkvision.v1.AlarmTime
	(*TimeDuration)(nil),                    // 14: hkvision.v1.TimeDuration
	(*CoordinatePoint)(nil),                 // 15: hkvision.v1.CoordinatePoint
	(*CoordinateLine)(nil),                  // 16: hkvision.v1.CoordinateLine
	(*PolygonRegion)(nil),                   // 17: hkvision.v1.PolygonRegion
	(*TargetRect)(nil),                      // 18: hkvision.v1.TargetRect
	(*ActionAnalysis)(nil),                  // 19: hkvision.v1.ActionAnalysis
	(*TargetInfo)(nil),                      // 20: hkvision.v1.TargetInfo
	(*AlarmInfo)(nil),                       // 21: hkvision.v1.AlarmInfo
	(*LinkageWay)(nil),                      // 22: hkvision.v1.LinkageWay
	(*MotionDetectX)(nil),                   // 23: hkvision.v1.MotionDetectX
	(*MotionDetection)(nil),                 // 24: hkvision.v1.MotionDetection
	(*LINE)(nil),                            // 25: hkvision.v1.LINE
	(*Point)(nil),                           // 26: hkvision.v1.Point
	(*LineAlarm)(nil),                       // 27: hkvision.v1.LineAlarm
	(*FieldDetection)(nil),                  // 28: hkvision.v1.FieldDetection
	(*Loiter)(nil),                          // 29: hkvision.v1.Loiter
	(*EnterField)(nil),                      // 30: hkvision.v1.EnterField
	(*ExitField)(nil),                       // 31: hkvision.v1.ExitField
	(*HighDensity)(nil),                     // 32: hkvision.v1.HighDensity
	(*BaggageLeft)(nil),                     // 33: hkvision.v1.BaggageLeft
	(*BaggageTake)(nil),                     // 34: hkvision.v1.BaggageTake
	(*Parking)(nil),                         // 35: hkvision.v1.Parking
	(*Shelter)(nil),                         // 36: hkvision.v1.Shelter
	(*ROIRegionParam)(nil),                  // 37: hkvision.v1.ROIRegionParam
	(*SmartParam)(nil),                      // 38: hkvision.v1.SmartParam
	(*AlarmConfig)(nil),                     // 39: hkvision.v1.AlarmConfig
	(*VehicleDetect)(nil),                   // 40: hkvision.v1.VehicleDetect
	(*VehicleDetectInfo)(nil),               // 41: hkvision.v1.VehicleDetectInfo
	(*RECT)(nil),                            // 42: hkvision.v1.RECT
	(*FaceSnap)(nil),                        // 43: hkvision.v1.FaceSnap
	(*FaceInfo)(nil),                        // 44: hkvision.v1.FaceInfo
	(*HumanInfos)(nil),                      // 45: hkvision.v1.HumanInfos
	(*MixedTargetDetection)(nil),            // 46: hkvision.v1.MixedTargetDetection
	(*State)(nil),                           // 47: hkvision.v1.State
	(*GetEventAbilityRequest)(nil),          // 48: hkvision.v1.GetEventAbilityRequest
	(*GetEventAbilityResponse)(nil),         // 49: hkvision.v1.GetEventAbilityResponse
	(*GetDeviceConfigRequest)(nil),          // 50: hkvision.v1.GetDeviceConfigRequest
	(*GetDeviceConfigResponse)(nil),         // 51: hkvision.v1.GetDeviceConfigResponse
	(*SetDeviceConfigRequest)(nil),          // 52: hkvision.v1.SetDeviceConfigRequest
	(*SetDeviceConfigResponse)(nil),         // 53: hkvision.v1.SetDeviceConfigResponse
	(*anypb.Any)(nil),                       // 54: google.protobuf.Any
}
var file_hkvision_hkvision_proto_depIdxs = []int32{
	14, // 0: hkvision.v1.AlarmTime.times:type_name -> hkvision.v1.TimeDuration
	15, // 1: hkvision.v1.CoordinateLine.start_point:type_name -> hkvision.v1.CoordinatePoint
	15, // 2: hkvision.v1.CoordinateLine.end_point:type_name -> hkvision.v1.CoordinatePoint
	15, // 3: hkvision.v1.PolygonRegion.cood_point:type_name -> hkvision.v1.CoordinatePoint
	15, // 4: hkvision.v1.TargetRect.coord_point:type_name -> hkvision.v1.CoordinatePoint
	4,  // 5: hkvision.v1.ActionAnalysis.detection_target_type:type_name -> hkvision.v1.DETECTION_TARGET
	16, // 6: hkvision.v1.ActionAnalysis.plane_bottom:type_name -> hkvision.v1.CoordinateLine
	3,  // 7: hkvision.v1.ActionAnalysis.cross_direction:type_name -> hkvision.v1.CrossDirection
	17, // 8: hkvision.v1.ActionAnalysis.polygon_region:type_name -> hkvision.v1.PolygonRegion
	42, // 9: hkvision.v1.TargetInfo.target_rect:type_name -> hkvision.v1.RECT
	12, // 10: hkvision.v1.AlarmInfo.device_type:type_name -> hkvision.v1.AlarmInfo.ALARM_OUTPUT_DEVICE_TYPE
	0,  // 11: hkvision.v1.AlarmInfo.alarm_type:type_name -> hkvision.v1.AlarmType
	2,  // 12: hkvision.v1.AlarmInfo.target:type_name -> hkvision.v1.TargetType
	20, // 13: hkvision.v1.AlarmInfo.alarm_target_rect:type_name -> hkvision.v1.TargetInfo
	19, // 14: hkvision.v1.AlarmInfo.action_analysis:type_name -> hkvision.v1.ActionAnalysis
	23, // 15: hkvision.v1.MotionDetection.xs:type_name -> hkvision.v1.MotionDetectX
	26, // 16: hkvision.v1.LINE.start_point:type_name -> hkvision.v1.Point
	26, // 17: hkvision.v1.LINE.end_point:type_name -> hkvision.v1.Point
	25, // 18: hkvision.v1.LineAlarm.lineation:type_name -> hkvision.v1.LINE
	1,  // 19: hkvision.v1.LineAlarm.cross_direction:type_name -> hkvision.v1.DirectionType
	2,  // 20: hkvision.v1.LineAlarm.detection_target:type_name -> hkvision.v1.TargetType
	26, // 21: hkvision.v1.FieldDetection.polygon:type_name -> hkvision.v1.Point
	2,  // 22: hkvision.v1.FieldDetection.detection_target:type_name -> hkvision.v1.TargetType
	26, // 23: hkvision.v1.Loiter.polygon:type_name -> hkvision.v1.Point
	26, // 24: hkvision.v1.EnterField.polygon:type_name -> hkvision.v1.Point
	2,  // 25: hkvision.v1.EnterField.detection_target:type_name -> hkvision.v1.TargetType
	26, // 26: hkvision.v1.ExitField.polygon:type_name -> hkvision.v1.Point
	2,  // 27: hkvision.v1.ExitField.detection_target:type_name -> hkvision.v1.TargetType
	26, // 28: hkvision.v1.HighDensity.polygon:type_name -> hkvision.v1.Point
	2,  // 29: hkvision.v1.HighDensity.detection_target:type_name -> hkvision.v1.TargetType
	26, // 30: hkvision.v1.BaggageLeft.polygon:type_name -> hkvision.v1.Point
	2,  // 31: hkvision.v1.BaggageLeft.detection_target:type_name -> hkvision.v1.TargetType
	26, // 32: hkvision.v1.BaggageTake.polygon:type_name -> hkvision.v1.Point
	2,  // 33: hkvision.v1.BaggageTake.detection_target:type_name -> hkvision.v1.TargetType
	26, // 34: hkvision.v1.Parking.polygon:type_name -> hkvision.v1.Point
	26, // 35: hkvision.v1.Shelter.region:type_name -> hkvision.v1.Point
	26, // 36: hkvision.v1.ROIRegionParam.points:type_name -> hkvision.v1.Point
	3,  // 37: hkvision.v1.ROIRegionParam.direction:type_name -> hkvision.v1.CrossDirection
	37, // 38: hkvision.v1.SmartParam.rio_regions:type_name -> hkvision.v1.ROIRegionParam
	0,  // 39: hkvision.v1.AlarmConfig.alarm_type:type_name -> hkvision.v1.AlarmType
	13, // 40: hkvision.v1.AlarmConfig.alarm_time:type_name -> hkvision.v1.AlarmTime
	22, // 41: hkvision.v1.AlarmConfig.linkage_way:type_name -> hkvision.v1.LinkageWay
	54, // 42: hkvision.v1.AlarmConfig.config:type_name -> google.protobuf.Any
	25, // 43: hkvision.v1.VehicleDetect.vehicle_detect_line:type_name -> hkvision.v1.LINE
	5,  // 44: hkvision.v1.VehicleDetectInfo.type:type_name -> hkvision.v1.VehicleType
	6,  // 45: hkvision.v1.VehicleDetectInfo.color:type_name -> hkvision.v1.Color
	42, // 46: hkvision.v1.FaceSnap.pupile_region:type_name -> hkvision.v1.RECT
	26, // 47: hkvision.v1.FaceSnap.face_snap_rect:type_name -> hkvision.v1.Point
	26, // 48: hkvision.v1.FaceSnap.mask_face_snap_rect:type_name -> hkvision.v1.Point
	7,  // 49: hkvision.v1.FaceInfo.age_group:type_name -> hkvision.v1.HumanAge
	8,  // 50: hkvision.v1.FaceInfo.face_expression:type_name -> hkvision.v1.FaceExpression
	44, // 51: hkvision.v1.HumanInfos.face_info:type_name -> hkvision.v1.FaceInfo
	6,  // 52: hkvision.v1.HumanInfos.up_color:type_name -> hkvision.v1.Color
	10, // 53: hkvision.v1.HumanInfos.up_type:type_name -> hkvision.v1.UpType
	6,  // 54: hkvision.v1.HumanInfos.down_color:type_name -> hkvision.v1.Color
	11, // 55: hkvision.v1.HumanInfos.down_type:type_name -> hkvision.v1.DownType
	42, // 56: hkvision.v1.MixedTargetDetection.mixed_terget_detect_rect:type_name -> hkvision.v1.RECT
	42, // 57: hkvision.v1.MixedTargetDetection.pupile_region:type_name -> hkvision.v1.RECT
	0,  // 58: hkvision.v1.GetEventAbilityResponse.alarm_type:type_name -> hkvision.v1.AlarmType
	47, // 59: hkvision.v1.GetEventAbilityResponse.state:type_name -> hkvision.v1.State
	0,  // 60: hkvision.v1.GetDeviceConfigRequest.alarm_type:type_name -> hkvision.v1.AlarmType
	39, // 61: hkvision.v1.GetDeviceConfigResponse.alarm_config:type_name -> hkvision.v1.AlarmConfig
	47, // 62: hkvision.v1.GetDeviceConfigResponse.state:type_name -> hkvision.v1.State
	0,  // 63: hkvision.v1.SetDeviceConfigRequest.alarm_type:type_name -> hkvision.v1.AlarmType
	39, // 64: hkvision.v1.SetDeviceConfigRequest.alarm_config:type_name -> hkvision.v1.AlarmConfig
	47, // 65: hkvision.v1.SetDeviceConfigResponse.state:type_name -> hkvision.v1.State
	50, // 66: hkvision.v1.HKVisionService.GetDeviceConfig:input_type -> hkvision.v1.GetDeviceConfigRequest
	52, // 67: hkvision.v1.HKVisionService.SetDeviceConfig:input_type -> hkvision.v1.SetDeviceConfigRequest
	48, // 68: hkvision.v1.HKVisionService.GetEventAbility:input_type -> hkvision.v1.GetEventAbilityRequest
	51, // 69: hkvision.v1.HKVisionService.GetDeviceConfig:output_type -> hkvision.v1.GetDeviceConfigResponse
	53, // 70: hkvision.v1.HKVisionService.SetDeviceConfig:output_type -> hkvision.v1.SetDeviceConfigResponse
	49, // 71: hkvision.v1.HKVisionService.GetEventAbility:output_type -> hkvision.v1.GetEventAbilityResponse
	69, // [69:72] is the sub-list for method output_type
	66, // [66:69] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_hkvision_hkvision_proto_init() }
func file_hkvision_hkvision_proto_init() {
	if File_hkvision_hkvision_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hkvision_hkvision_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinateLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetRect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkageWay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotionDetectX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotionDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LINE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Loiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighDensity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaggageLeft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaggageTake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shelter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROIRegionParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleDetectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RECT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceSnap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedTargetDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventAbilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventAbilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hkvision_hkvision_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hkvision_hkvision_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hkvision_hkvision_proto_goTypes,
		DependencyIndexes: file_hkvision_hkvision_proto_depIdxs,
		EnumInfos:         file_hkvision_hkvision_proto_enumTypes,
		MessageInfos:      file_hkvision_hkvision_proto_msgTypes,
	}.Build()
	File_hkvision_hkvision_proto = out.File
	file_hkvision_hkvision_proto_rawDesc = nil
	file_hkvision_hkvision_proto_goTypes = nil
	file_hkvision_hkvision_proto_depIdxs = nil
}
